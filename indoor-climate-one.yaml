esphome:
  name: indoor-climate-one
  includes:
    - co2tocolor.h

esp32:
  # TODO: board isn't quire right
  # https://github.com/platformio/platform-espressif32/pull/745
  board: featheresp32
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  services:
    - service: play_rtttl
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return song_str;'

# Enable over the air updates
ota:

# Enable webserver for fun
web_server:
  port: 80

# Wifi connection
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true  # there is only one network around here, use that right away.
# (I disabled the default fallback access point)




# -------------------------
# Substitutions & Globals
# -------------------------

substitutions:
  recoverysong: Cantina:d=4, o=5, b=250:8a, 8p, 8d6, 8p, 8a, 8p, 8d6, 8p, 8a, 8d6, 8p, 8a, 8p, 8g#, a, 8a, 8g#, 8a, g, 8f#, 8g, 8f#, f., 8d., 16p, p., 8a, 8p, 8d6, 8p, 8a, 8p, 8d6, 8p, 8a, 8d6, 8p, 8a, 8p, 8g#, 8a, 8p, 8g, 8p, g., 8f#, 8g, 8p, 8c6, a#, a, g
  alarmsong: alarm:d=4,o=5,b=100:16e6,16e6,4p,16e6,16e6,4p,16e6,16e6,4p,16e6,16e6

globals:
  - id: enable_recoverysong
    type: bool
    initial_value: 'true'

# -------------------------
# Components
# -------------------------

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO27
      inverted: true
      mode:
        input: true
        pullup: true
    name: "Onboard Button"
    internal: true
    on_press:
      then:
        - rtttl.play: Entertainer:d=4,o=5,b=140:8d,8d#,8e,c6,8e,c6,8e,2c.6,8c6,8d6,8d#6,8e6,8c6,8d6,e6,8b,d6,2c6,p,8d,8d#,8e,c6,8e,c6,8e,2c.6,8p,8a,8g,8f#,8a,8c6,e6,8d6,8c6,8a,2d6
# RR:d=4,o=5,b=200:8g,8a,8c6,8a,e6,8p,e6,8p,d6.,p,8p,8g,8a,8c6,8a,d6,8p,d6,8p,c6,8b,a.,8g,8a,8c6,8a,2c6,d6,b,a,g.,8p,g,2d6,2c6.,p,8g,8a,8c6,8a,e6,8p,e6,8p,d6.,p,8p,8g,8a,8c6,8a,2g6,b,c6.,8b,a,8g,8a,8c6,8a,2c6,d6,b,a,g.,8p,g,2d6,2c6
# zelda_woods:d=4,o=5,b=140:8f6,8a6,b6,8f6,8a6,b6,8f6,8a6,8b6,8e7,d7,8b6,8c7,8b6,8g6,2e6,8d6,8e6,8g6,2e6,8f6,8a6,b6,8f6,8a6,b6,8f6,8a6,8b6,8e7,d7,8b6,8c7,8e7,8b6,2g6,8b6,8g6,8d6,2e6
#MissionImp:d=16,o=6,b=95:32d,32d#,32d,32d#,32d,32d#,32d,32d#,32d,32d,32d#,32e,32f,32f#,32g,g,8p,g,8p,a#,p,c7,p,g,8p,g,8p,f,p,f#,p,g,8p,g,8p,a#,p,c7,p,g,8p,g,8p,f,p,f#,p,a#,g,2d,32p,a#,g,2c#,32p,a#,g,2c,a#5,8c,2p,32p,a#5,g5,2f#,32p,a#5,g5,2f,32p,a#5,g5,2e,d#,8d";
# http://www.fodor.sk/Spectrum/rttl.htm
# https://www.end2endzone.com/how-to-convert-arduino-code-to-actual-rtttl-melodies-using-librtttl-and-anyrtttl/

i2c:
  sda: 21
  scl: 22
  scan: false  # seems redundant as we know exactly what's on the bus!

sensor:
  - platform: scd4x
    update_interval: 10s
    co2:
      name: "Room Sensor 1 - CO2"
      id: "co2"
      on_value:
        then:
          - light.addressable_set:
              id: "led_external"
              red: !lambda "return co2_to_color_component<0>(x);"
              green: !lambda "return co2_to_color_component<1>(x);"
              blue: !lambda "return co2_to_color_component<2>(x);"
      #on_value_range: # triggers only when entering/existing an interval. Control this manually here!
          - if:
              condition:
                lambda: 'return x > 1100.0;'
              then:
                - rtttl.play: ${alarmsong}
          - if:
              condition:
                lambda: 'return x > 750.0;'
              then:
                - globals.set:
                    id: enable_recoverysong
                    value: 'true'
          - if:
              condition:
                lambda: 'return x < 650.0 && id(enable_recoverysong);'
              then:
                - rtttl.play: ${recoverysong}
                - globals.set:
                    id: enable_recoverysong
                    value: 'false'

    temperature:
      name: "Room Sensor 1 - Temperature"
      id: "temperature"
    humidity:
      name: "Room Sensor 1 - Humidity"
      id: "humidity"

output:
  - platform: ledc
    pin: GPIO25
    id: buzzer

rtttl:
  output: buzzer

status_led:
  pin: GPIO2   # yes it's a stripping pin yada yada -.-

light:
  - platform: fastled_clockless
    name: "Onboard RGB"
    id: "led_internal"
    chipset: WS2812
    pin: GPIO5
    num_leds: 1
    rgb_order: GRB
    default_transition_length: 0s
    internal: true
  - platform: fastled_clockless
    name: "External RGB"
    id: "led_external"
    chipset: WS2812
    pin: GPIO26
    num_leds: 1
    rgb_order: RGB
    default_transition_length: 2.0s
    restore_mode: ALWAYS_ON
    internal: true
