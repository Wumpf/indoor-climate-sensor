esphome:
  name: ${devicename}
  includes:
    - cpplogic.h
    - cpplogic.cpp
  on_loop:
    then:
      - lambda: on_loop(id(target_led_gradient_value), id(led_external), id(silent_mode).state);

esp32:
  # Using a firebeetle32e, but firebeetle seems to be the right class for that
  # https://github.com/platformio/platform-espressif32/pull/745
  board: firebeetle32
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  services:
    - service: play_rtttl
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return song_str;'
    - service: simulate_co2
      variables:
        simulated_co2: float
      then:
        - lambda: on_new_co2(simulated_co2, id(target_led_gradient_value), id(buzzer));
    - service: perform_forced_calibration
      variables:
        current_co2: int
      then:
        - scd4x.perform_forced_calibration:
            value: !lambda 'return current_co2;'

# Enable over the air updates
ota:

# Enable webserver for fun
web_server:
  port: 80

# Wifi connection
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true  # there is only one network around here, use that right away.
  use_address: ${devicename}
# (I removed the default fallback access point)

# external_components:
#   - source: custom_components

# -------------------------
# Globals
# -------------------------

globals:
  - id: target_led_gradient_value
    type: float
    initial_value: -1.0f  # "no data"

# -------------------------
# Components
# -------------------------

switch:
  - platform: template
    id: silent_mode
    name: "${devicename_nice} - Silent Mode"
    icon: "mdi:sleep"
    optimistic: true
    on_turn_on:
      - rtttl.play:
          rtttl: off:d=4,o=6,b=150:8f#,8d#,8b5
      - light.turn_off: led_external
    on_turn_off:
      - rtttl.play:
          rtttl: on:d=4,o=6,b=150:8b5,8d#,8f#
      - light.turn_on: led_external
      - lambda: on_new_co2(id(co2).state, id(target_led_gradient_value), id(buzzer));

binary_sensor:
  - platform: gpio
    name: "Onboard Button"
    pin:
      number: GPIO27
      inverted: true
      mode:
        input: true
        pullup: true
    internal: true
    on_press:
      then:
        - switch.toggle: silent_mode

i2c:
  sda: 21
  scl: 22
  scan: false  # seems redundant as we know exactly what's on the bus!

sensor:
  - platform: scd4x
    update_interval: 15s
    automatic_self_calibration: false
    temperature_offset: ${temperature_offset}
    co2:
      name: "${devicename_nice} - CO2"
      id: "co2"
      # discard first value (it's typically garbage)
      filters:
        - lambda: |-
            static bool first_run = true;
            if (first_run || x < 100.0) { // smaller than 100 is obviously garbage
              first_run = false;
              return {};
            } else {
              return std::min(x, 3000.0f); // if you blew on it I won't make it blow up!
            }
      on_value:
        - if:
            condition:
              switch.is_off: silent_mode
            then:
              lambda: on_new_co2(x, id(target_led_gradient_value), id(buzzer));
    temperature:
      name: "${devicename_nice} - Temperature"
      id: "temperature"
    humidity:
      name: "${devicename_nice} - Humidity"
      id: "humidity"

output:
  - platform: ledc
    pin: GPIO26
    id: pin_buzzer

rtttl:
  id: buzzer
  output: pin_buzzer

status_led:
  pin: GPIO2   # yes it's a stripping pin yada yada -.-

light:
  - platform: neopixelbus 
    name: "Onboard RGB"
    id: "led_internal"
    variant: WS2812
    pin: GPIO5
    num_leds: 1
    type: GRB
    default_transition_length: 0s
    restore_mode: ALWAYS_OFF # not used right now, have experiments not leak into restart!
    internal: true

    # neopixelbus works better than fastled_clockless for this one!
    # fastled_clockless sometimes dropped colors/transitions
  - platform: neopixelbus
    name: "External RGB"
    id: "led_external"
    variant: WS2812
    pin: GPIO25
    num_leds: 1
    type: RGB
    # on startup we have no data, so no point in restoring.
    # We set an invalid color, but if that fails for some reason, don't turn the lamp off otherwise it looks like the device is broken!
    restore_mode: ALWAYS_ON
    # Built-in transition was giving me transitions through red or green depending on dominant color even on miniscule changes in orange
    # Still puzzled about this, but ended up coding my own transition effect via on_loop which has the advantage of closely following the gradient!
    default_transition_length: 0.0s
    gamma_correct: 0.0  # turning off making the "co2 gradient" nicer (0 is an early out, so better than 1). Otherwise it's hard to distinguish reds!
    internal: true
